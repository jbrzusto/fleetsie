#!/bin/bash

# fleetsiesrv - set up a server for use with fleetsie

function usage () {
cat <<EOF
fleetsie_srv USER@SERVER

where 'USER' must either be 'root', or a user with sudo privileges on 'SERVER'

This script will set up 'SERVER' via ssh like so:

- create user 'fleetsie' with 'sudo' privileges; you will be prompted to enter
  a password for this user
- create keys for logging into SERVER as user 'fleetsie'
EOF

exit 1
}

SSHUSER=$1
SERVER=${1#*@}

if ! ssh $SSHUSER date > /dev/null 2>/tmp/error.txt; then
    echo unable to ssh $SSHUSER: `cat /tmp/error.txt`
    exit 1
fi

echo Confirmed that $SSHUSER is valid.
if [[ ! sqlite3 -version ]]; then
    echo Installing missing packages...
    ssh $SSHUSER sudo apt-get update
    ssh $SSHUSER sudo apt install sqlite3
fi
echo Creating user fleetsie - you will need to enter a new password twice...
ssh $SSHUSER sudo adduser  --gecos '""' fleetsie
ssh $SSHUSER sudo usermod -a -G sudo fleetsie
echo Generating ssh keys for user fleetsie
TARGFILE=~/.ssh/id_ed25519_fleetsie_$SERVER
ssh-keygen -P "" -t ed25519 -f $TARGFILE
echo Adding config to ~/.ssh for fleetsie@$SERVER
cat >> ~/.ssh/config <<EOF
Host $SERVER
  Hostname $SERVER
  User fleetsie
  StrictHostKeyChecking yes
  IdentityFile $TARGFILE
  IdentitiesOnly true
EOF
echo Adding new key to authorized_keys file for fleetsie@$SERVER
ssh $SSHUSER sudo mkdir /home/fleetsie/.ssh
cat ${TARGFILE}.pub | ssh $SSHUSER sudo tee /home/fleetsie/.ssh/authorized_keys
echo Changing ownership of .ssh directory for fleetsie@$SERVER
ssh $SSHUSER sudo chown -R fleetsie:fleetsie /home/fleetsie/.ssh/
echo Uploading fleetsie_login and fleetsie_auth programs to fleetsie@$SERVER
scp ./fleetsie_login ./fleetsie_auth fleetsie@$SERVER:
ssh fleetsie@$SERVER chmod g-w fleetsie_login fleetsie_auth
exit 0
