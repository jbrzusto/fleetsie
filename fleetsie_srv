#!/bin/bash

# fleetsiesrv - set up a server for use with fleetsie

function usage () {
cat <<EOF
fleetsie_srv USER@SERVER

where 'USER' must either be 'root', or a user with sudo privileges on 'SERVER'

This script will set up 'SERVER' via ssh like so:

- create user 'fleetsie' with 'sudo' privileges; you will be prompted to enter
  a password for this user
- create keys for logging into SERVER as user 'fleetsie'
- install packages required by server-side fleetsie code
- change sshd configuration to support in-channel keep-alives for
  maintaining fleet connectivity status
EOF

exit 1
}

SSHUSER=$1
SERVER=${1#*@}

if ! ssh $SSHUSER date > /dev/null 2>/tmp/error.txt; then
    echo unable to ssh $SSHUSER: `cat /tmp/error.txt`
    exit 1
fi

echo Confirmed that $SSHUSER is valid.
printf "Ensuring required packages are installed...\n"
PACKAGES="cron sqlite3 rsync"
for p in $PACKAGES; do
    if ! ssh $SSHUSER dpkg -l $p > /dev/null 2>&1; then
	# just install all so we only call update once
	echo Installing missing packages including $p ...
	ssh $SSHUSER sudo apt-get update
	ssh $SSHUSER sudo apt install -y sqlite3 rsync
	break
    fi
done
FLEETSIE_SSHUSER=fleetsie@$SERVER
if ! ssh $FLEETSIE_SSHUSER date > /dev/null 2>&1; then
    echo Creating user fleetsie - you will need to enter a new password twice...
    ssh $SSHUSER sudo adduser  --gecos '""' fleetsie
    ssh $SSHUSER sudo usermod -a -G sudo fleetsie
    TARGFILE=~/.ssh/id_ed25519_fleetsie_$SERVER
    if [[ ! -f $TARGFILE ]]; then
	echo Generating ssh keys for user fleetsie
	ssh-keygen -P "" -t ed25519 -f $TARGFILE
	FLEETSIE_COMMENT='# added by fleetsie_srv'
	if ! grep "$FLEETSIE_COMMENT" ~/.ssh/config >/dev/null; then
	    echo Adding config to ~/.ssh for fleetsie@$SERVER
	    cat >> ~/.ssh/config <<EOF
# added by fleetsie_srv
Host $SERVER
  Hostname $SERVER
  User fleetsie
  StrictHostKeyChecking yes
  IdentityFile $TARGFILE
  IdentitiesOnly true
EOF
	fi
    fi
    echo Making home folder listable by others, so that
    echo fleet users can run executables from it.
    ssh $SSHUSER chmod o+x .
    echo Adding new key to authorized_keys file for $FLEETSIE_SSHUSER
    ssh $SSHUSER sudo mkdir -p /home/fleetsie/.ssh
    cat ${TARGFILE}.pub | ssh $SSHUSER sudo tee /home/fleetsie/.ssh/authorized_keys > /dev/null
    echo Changing ownership of .ssh directory for $FLEETSIE_SSHUSER
    ssh $SSHUSER sudo chown -R fleetsie:fleetsie /home/fleetsie/.ssh/
fi
echo Saving existing sshd configuration, replacing it with fleetsie version.
ssh $SSHUSER sudo mv /etc/ssh/sshd_config /etc/ssh/sshd_config_saved_`date -Iseconds`
cat sshd_config-srv | ssh $SSHUSER sudo tee /etc/ssh/sshd_config > /dev/null
ssh $SSHUSER sudo chmod u=rw,og=r /etc/ssh/sshd_config

echo Updating fleetsie_login, fleetsie_auth, fleetsie_gen_server programs at $FLEETSIE_SSHUSER
for f in fleetsie_login fleetsie_auth fleetsie_gen_server; do
    rsync -av ./$f $FLEETSIE_SSHUSER:$f
done

echo Installing mariadb server
apt install -y mariadb-server

echo Installing zabbix server
wget https://repo.zabbix.com/zabbix/7.4/release/ubuntu/pool/main/z/zabbix-release/zabbix-release_latest_7.4+ubuntu22.04_all.deb
dpkg -i zabbix-release_latest_7.4+ubuntu22.04_all.deb
apt update
apt install -y zabbix-server-mysql zabbix-frontend-php zabbix-nginx-conf zabbix-sql-scripts zabbix-agent2

# generate the en_US.UTF-8 locale required for use of zabbix in english
apt -y locales
sudo locale-gen en_US.UTF-8

# get certbot
apt install -y certbot
exit 0
