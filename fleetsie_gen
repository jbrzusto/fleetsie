#!/bin/bash

# fleetsiegen - create a template provisioning disk for fleetsie,
# and the fleet inventory on the fleet server.

function usage () {
    # usage below is copied from the `fleetsie_gen` section of README.md
    cat <<EOF
## 'fleetsie_gen' - generate a USB provisioning disk and server inventory
for a fleet of devices.

Usage:

   fleetsie_gen FLEET_NAME FLEET_HOST [NUM] [USB_PARTITION]

where

   FLEET_NAME is the name of the fleet.  It should be short and
   composed of alphanumeric characters and underscores.  Devices
   belonging to the fleet will be assigned the hostnames FLEET_NAME-1,
   FLEET_NAME-2, ...

   FLEET_HOST is the server (e.g. whoflewby.org) where the fleet
   will be hosted.  The user running fleetsie_gen must have ssh set-up
   so that they can login to fleetsie@FLEET_HOST

   NUM (optional) is the number of devices to pre-allocate for the
   fleet on the server.  If this is zero or missing, no devices are
   pre-allocated.  Otherwise, SIZE new devices are allocated for the
   fleet, adding to any which are already there.  e.g. if the fleet
   already has 100 device allocated (from a previous use of
   fleetsie_gen), the new devices will be named FLEET-101, FLEET-102,
   ...

   USB_PARTITION (optional) is the name of the disk partition on the
   user's machine (e.g. sda2) where the fleetsie files will be installed.
   If missing, no fleet files are installed anywhere; this allows you
   to just allocate new fleet devices on the server without creating
   a USB disk.

   If USB_PARTITION begins with a "/", it is treated as a path to a
   directory, and fleetsie_gen will create or use a subdirectory there
   called "fleetsie" as the destination for installing files, rather
   than a disk partition. This can be used for testing.



fleetsie_gen creates files on a USB drive and on the fleet server such
that a number of devices can be provisioned (using the USB drive) with
access to the server.

USB drive layout
fleetsie_gen creates this layout on the USB drive:

  /fleetsie
   - top-level folder

  /fleetsie/wifi.txt

   - file containing essids and passwords for wifi networks, one per
     line i.e. line 1 = ESSID1, line 2 = password1, line 3 = ESSID2,
     line 3 = password2, ...  During provisioning, the device will
     attempt to connect to wifi using these credentials, one set at a
     time, until a connection succeeds.

  /fleetsie/fleet.txt

   - file containing the fleet hostname on line 1, and the fleet name on line 2

  /fleetsie/fleetsieauth.pub
  /fleetsie/fleetsieauth

   - ssh keys used to login to the fleet server at provisioning time; on the server,
     ssh is configured so that logging in with these keys runs the server-side
     provisioning code.  No other use for these keys is permitted by the server.

  /fleetsie/ssh-tunnel.service
  /fleetsie/ssh_tunnel.sh

   - systemd service and script it runs to maintain a ssh connection to the fleet server,
     with a port mapped from the server back to the local ssh server; also maintains
     a local port which maps to the zabbix data port on the fleet server.

  /fleetsie/custom/setup

   - the custom folder is where fleetsie looks for other files you want to install.
     The setup script will be run after all other provisioning steps have succeeded.
     fleetsie ignores all other files and subdirectories of /fleetsie/custom.

EOF
    exit 1
}


# notes on what the db looks like
# create table devices (
#     id integer unique primary key not null,
#     fleet string,
#     fleetuser string,
#     hostname string,
#     hwid string,
#     otp string,
#     ts_generated double,
#     ts_provisioned double,
#     tunnel_port integer,
#     public_key string,
#     private_key string,
#     ip_provisioned_from
# );
# create unique index on devices(hwid);
# create unique index on devices(fleet,otp,hwid);

# Entries in this table are created by fleetsie_gen.  For each entry, the missing fields are
# ts_provisioned, ip_provisioned_from, and hwid.  These are determined by the provisioning
# race.
