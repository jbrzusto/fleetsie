#!/bin/bash

# fleetsie_provision: provision this device using files on an attached USB drive

# on a fatal error, write any supplied arguments to $LOGFILE if defined,
# and then just flash the red LED
function fatal() {
    if [[ "$LOGFILE" ]]; then
	echo "$*" >> $LOGFILE
	echo >> $lOGFILE
	sync
    fi
    echo none > /sys/class/leds/ACT/trigger
    echo 0 > /sys/class/leds/ACT/brightness
    while true; do
	echo 1 > /sys/class/leds/PWR/brightness
	sleep .2
	echo 0 > /sys/class/leds/PWR/brightness
	sleep .2
    done
}

# on a warning, write any supplied arguments to $LOGFILE, if defined
function warning() {
    if [[ "$LOGFILE" ]]; then
	echo "warning: $*" >> $LOGFILE
	echo >> $lOGFILE
	sync
    fi
}

# on info, write any supplied arguments to $LOGFILE, if defined
function warning() {
    if [[ "$LOGFILE" ]]; then
	echo "$*" >> $LOGFILE
	echo >> $lOGFILE
	sync
    fi
}

# wait for systemctl to have brought up all the usual units
systemctl is-system-running --wait

# wait for a USB drive
while true; do
      if grep "sda[0-9]?$" /proc/partitions; then
      	  break
      fi
      echo none > /sys/class/leds/ACT/trigger
      echo 1 > /sys/class/leds/ACT/brightness
      echo 1 > /sys/class/leds/PWR/brightness
      sleep 1
      echo 0 > /sys/class/leds/ACT/brightness
      echo 0 > /sys/class/leds/PWR/brightness
      sleep 1
done

mkdir /tmp/usb
mounted=""
tmp=`mktemp -d`
for PART in `grep sda[0-9]$ /proc/partitions | awk '{print $4}'`; do
    if mount /dev/$PART $tmp; then
	## check for fleetsie directory on this partition
	if [[ -d $tmp/fleetsie ]]; then
	    mounted=1
	    break
	else
	    umount $tmp
	fi
    fi
done
if [[ ! "$mounted" ]]; then
    fatal
fi

cd $tmp/fleetsie
LOGFILE="fleetsie_provisioning_log.txt"
printf "\nprovisioning started from $PART at %s\n" `date` >> $LOGFILE

## try provision wifi
if [[ ! -f "wifi.txt" ]]; then
    fatal "can't find fleetsie/wifi.txt on USB disk\nfirst line should be the WiFi network name (ESSID), second line should be the WiFi password"
fi
con=""
{
    while true; do
	if ! read ESSID; then
	    break
	fi
	if ! read PASSWD; then
	    info "wifi.txt is missing a password line for $ESSID"
	    break
	fi
	CMD="nmcli device wifi con \"$ESSID\" password \"$PASSWD\""
	read CONRES < <( bash -c "$CMD" 2>&1)
	if [[ "$CONRES" =~ "successfully activated" ]]; then
            info "Connected WiFi to $ESSID"
	    con=1
	    break
	else
            info "Could not connect WiFi to $ESSID; error was $CONRES"
	fi
    done
 } < wifi.txt

if [[ $con != 1 ]]; then
    fatal "unable to connect to any WiFi networks given in wifi.txt"
fi

if ! sqlite3 < /dev/null; then
    info "updating apt and installing sqlite3"
    if [[ ! apt update && apt install sqlite3 ]]; then
	fatalf "unable to install sqlite3"
    fi
fi

## try get ssh keys for fleet server
if [[ ! -f fleet.txt ]]; then
    fatal "can't find fleetsie/fleet.txt on USB disk\nfirst line should be fleet server hostname; e.g. whoflewby.org\nsecond line should be fleet name; e.g. ampi\n"
fi
{ read FLEETHOST && read FLEETNAME && read FLEETKNOWNHOST; } < fleetsie/fleet.txt
if [[ ! $FLEETHOST ]]; then
	fatal "can't read fleet host name from line 1 of fleetsie/fleet.txt file on USB disk"
fi
if [[ ! $FLEETNAME ]]; then
	fatal "can't read fleet name from line 2 of fleetsie/fleet.txt file on USB disk"
fi

if [[ ! $FLEETKNOWNHOST ]]; then
	fatal "can't read known_hosts line for fleet host from from line 3 of fleetsie/fleet.txt file on USB disk"
fi


if [[ ! -f fleetsieauth.pub || ! -f fleetsieauth || ! -f otp.sqlite ]]; then
    fatal "can't find one or more files needed for connecting to fleet server.\nneed:\nfleetsieauth.pub\nfleetsieauth\notp.sqlite\n"
fi

info "appending known_hosts from USB drive to /root/.ssh/known_hosts"
mkdir -p /root/.ssh
echo "$FLEETKNOWNHOST" >> /.ssh/known_hosts
cp  fleetsieauth.pub fleetsieauth /root/.ssh/
chmod oug+r /root/.ssh/fleetsieauth.pub
chmod og-rw /root/.ssh/fleetsieauth

# get name of user with id=1000, typically the first non-privileged user.
user1000=`id -nu 1000`

info "sshing to fleet server $FLEETHOST"

SERNO=`cat /sys/class/net/eth0/address`
REPLY_FILE=/tmp/fleetsieauth.txt
ERROR_FILE=/tmp/fleetsieauth.err
while true; do
    otp=`sqlite3 otp.sqlite "select otp from otp where used=0 order by id limit 1"`
    if [[ "$otp" == "" ]]; then
	fatal "no passwords left in otp.sqlite - contact an administrator for more"
    fi
    if !  printf "%s\n%s\n" "$SERNO" "$OTP" | \
	    ssh -oStrictHostKeyChecking=true -i /root/.ssh/fleetsieauth fleetsie_$FLEETNAME@$FLEETHOST \
		> $REPLY_FILE 2> $ERROR_FILE; then
	fatal "error trying to ssh to $FLEETHOST: `cat ERROR_FILE`"
    fi
    {
	read rv
	case $rv in
	    bad)
		info "server $FLEETHOST reports OTP=$OTP is bad; trying next OTP"
		;;
	    try)
		read OTPNUM
		# mark earlier OTPs as no longer valid
		sqlite3 otp.sqlite "update otp set used=1 where id < $OTPNUM;"
		info "server $FLEETHOST suggests trying OTP # $OTPNUM"
		;;
	    error)
		read ERRMSG
		fatal "server $FLEETHOST reported this error: $ERRMSG"
		;;
	    ok)
		if ! { read HOSTNAME && read FLEETUSER && read PORT && read SRVPUBKEY && read SRVPRIVKEY && read DEVAUTHKEY } ; then
		    fatal "server $FLEETHOST gave bad reply: `cat $REPLY_FILE`"
		fi
		info "setting hostname to $HOSTNAME"
		echo "$HOSTNAME" /etc/hostname
		info "saving ssh keys for access to $HOSTNAME"
		mkdir -p /home/${USER1000}/.ssh
		ln -s "$PORT" /home/${USER1000}/.ssh/fleetsie_tunnel_port
		echo "$SRVPUBKEY" > /home/${USER1000}/.ssh/fleetsie.pub
		echo "$SRVPRIVKEY" > /home/${USER1000}/.ssh/fleetsie
		echo "$FLEETKNOWNHOST" >> /home/${USER1000}/.known_hosts
		echo "$DEVAUTHKEY" >> /home/pi/.ssh/authorized_keys
		cat >> /home/${USER1000}/.ssh/config <<EOF
Host fleetsie
   Hostname $FLEETHOST
   User $FLEETUSER
   StrictHostKeyChecking yes
   IdentityFile ~/.ssh/fleetsie
   IdentitiesOnly yes
EOF
		chown -R ${USER1000}:${USER1000} /home/${USER1000}/.ssh
		chmod oug-r /home/${USER1000}/fleetsie
		chmod og-w -R /home/${USER1000}/.ssh
		if ! ssh -i /home/pi/.ssh/fleetsie fleetsie date > /dev/null 2>/tmp/ssherror.txt; then
		    fatal "could not login to $FLEETHOST with new credentials: `cat /tmp/ssherror.txt`"
		fi
		break
	esac
    } < $REPLY_FILE
done

if [[ -d customize ]]; then
    info "entering customize directory"
    if [[ -f setup ]]; then
	info "running customize/setup"
	if . ./setup 2>/tmp/setuplog.txt; then
	    info "setup completed successfully."
	else
	    info "error while running setup: `cat /tmp/setuplog.txt`"
	fi
    else
	info "no setup script found."
    fi
else
    info "no customize directory on USB disk; provisioning done."
fi
info "provisioning ended at `date`"
